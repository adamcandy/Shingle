#!/usr/bin/env python

##############################################################################
#
#  Copyright (C) 2011-2018 Dr Adam S. Candy and others.
#  
#  Shingle:  An approach and software library for the generation of
#            boundary representation from arbitrary geophysical fields
#            and initialisation for anisotropic, unstructured meshing.
#  
#            Web: http://www.shingleproject.org
#  
#            Contact: Dr Adam S. Candy, contact@shingleproject.org
#  
#  This file is part of the Shingle project.
#  
#  Please see the AUTHORS file in the main source directory for a full list
#  of contributors.
#  
#  Shingle is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  Shingle is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#  
#  You should have received a copy of the GNU Lesser General Public License
#  along with Shingle. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import os
import sys
import shutil

shingle_path = os.path.realpath(os.path.join(os.path.realpath(os.path.dirname(os.path.realpath(__file__))), os.path.pardir))
sys.path.insert(0, shingle_path)

from shingle import Test, SpatialDiscretisation

filename = 'verification_figures.tex'
cachename = 'test_output'
cachepath = os.path.join(shingle_path, 'doc', 'fig', cachename)


if not os.path.exists(cachepath):
    os.mkdir(cachepath)

print('Searching for test image output')

content = []
for i, test_brml in enumerate(Test.VerificationTestEngine(locate_only = True).GetLocations()):
    s = SpatialDiscretisation.SpatialDiscretisation(test_brml, load_only=True)
    base, ext = os.path.splitext(test_brml)
    image = base + '.png'
    if not os.path.exists(image):
        continue
    print('  Located output: %(number)d. %(image)s' % {'number':i, 'image':image})
    cachefile = os.path.join(cachepath, os.path.basename(image))
    shutil.copy(image, cachefile)

    comment = s.GetComment().replace(os.linesep,' ').replace('_','\\_').replace('%','\%').replace('<=','$\\le$')
    string = '''
\\begin{figure}[!h]
\\begin{center}
\includegraphics[width=0.8\\textwidth]{%(filename)s}
\end{center}
\caption{%(caption)s}
\label{%(label)s}
\end{figure}
''' % {
  'filename':cachefile,
  'caption':s.Name().replace('_', ' ') + '.  Image of output spatial discretisation automatically generated by the \\shingle verification test engine.  This test problem \\brml description contains the following comment: ' + comment,
  'label':'fig:verification_case_' + s.Name().replace('_', '')
    }
    content.append(string)

with open(filename, 'w') as f:
    f.write(''.join(content))

print('Generated output document: ' + filename)

