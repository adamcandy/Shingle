
##############################################################################
#
#  Copyright (C) 2011-2018 Dr Adam S. Candy and others.
#  
#  Shingle:  An approach and software library for the generation of
#            boundary representation from arbitrary geophysical fields
#            and initialisation for anisotropic, unstructured meshing.
#  
#            Web: http://www.shingleproject.org
#  
#            Contact: Dr Adam S. Candy, contact@shingleproject.org
#  
#  This file is part of the Shingle project.
#  
#  Please see the AUTHORS file in the main source directory for a full list
#  of contributors.
#  
#  Shingle is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  Shingle is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public License for more details.
#  
#  You should have received a copy of the GNU Lesser General Public License
#  along with Shingle. If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

matrix:
  include:

  # Build Environment #1
  #
  # macOS 10.13 High Sierra pip base packages build
  #
  - env:
      - NAME=HighSierra-10.13-pip
    os: osx
    language: generic
    before_install:
      # See pyenv homebrew recommendations <https://github.com/yyuu/pyenv/wiki#suggested-build-environment>.
      # See https://docs.travis-ci.com/user/osx-ci-environment/#A-note-on-upgrading-packages.
      # virtualenv needs pyenv knowledge.
      # For pip: pyenv-virtualenv <https://github.com/yyuu/pyenv-virtualenv/blob/master/README.md>.
      - brew update
      - brew install openssl readline
      - brew outdated pyenv || brew upgrade pyenv
      - brew install pyenv-virtualenv
      - pyenv install 2.7.15
      - export PYENV_VERSION=2.7.15
      - export PATH="/Users/travis/.pyenv/shims:${PATH}"
      - pyenv virtualenv venv
    install:
      - python -m pip install -U pip
      - pip install numpy==1.13.3
      - pip install matplotlib pyproj shapely Pillow pytest requests
      - pip install Pydap==3.2.1
      - rm -f '/usr/local/include/c++'
      - brew install gmsh
      - brew link --overwrite gcc
      - brew install netcdf
      - pip install ScientificPython
    before_script:
      - export LD_LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LIBRARY_PATH"
    script:
      - make
      - make unittest
      # Pre-download, to best work with Travis timeout
      - make pre_download_large_datasets
      - make test


  # Build Environment #2
  #
  # Ubuntu Bionic 18.04 Docker container build and test
  #
  - env:
      - NAME=Bionic-18.04-docker
    services:
      - docker
    dist: xenial
    language: cpp
    install:
      - docker build --build-arg repo="$TRAVIS_REPO_SLUG" --build-arg branch="$TRAVIS_BRANCH" -f Dockerfile_Bionic -t shingle .
    script:
      - docker run -a stdout -t shingle make unittest
      # Pre-download, to best work with Travis timeout
      - docker run -a stdout -t shingle make pre_download_large_datasets
      - docker run -v $PWD:/run -w="/run" -a stdout -t shingle shingle -t


  # Build Environment #3
  #
  # Ubuntu Xenial 16.04 Docker container build and test
  #
  - env:
      - NAME=Xenial-16.04-docker
    services:
      - docker
    dist: xenial
    language: cpp
    install:
      - docker build --build-arg repo="$TRAVIS_REPO_SLUG" --build-arg branch="$TRAVIS_BRANCH" -f Dockerfile_Xenial -t shingle .
    script:
      - docker run -a stdout -t shingle make unittest
      # Pre-download, to best work with Travis timeout
      - docker run -a stdout -t shingle make pre_download_large_datasets
      - docker run -v $PWD:/run -w="/run" -a stdout -t shingle shingle -t


  # Build Environment #4
  #
  # Ubuntu Trusty 14.04 Docker container build and test
  #
  - env:
      - NAME=Trusty-14.04-docker
    services:
      - docker
    dist: xenial
    language: cpp
    install:
      - docker build --build-arg repo="$TRAVIS_REPO_SLUG" --build-arg branch="$TRAVIS_BRANCH" -f Dockerfile_Trusty -t shingle .
    script:
      - docker run -a stdout -t shingle make unittest
      # Pre-download, to best work with Travis timeout
      - docker run -a stdout -t shingle make pre_download_large_datasets
      - docker run -v $PWD:/run -w="/run" -a stdout -t shingle shingle -t


  # Build Environment #5
  #
  # Ubuntu Xenial 16.04 apt base packages build and test
  #
  - env:
      - NAME=Xenial-16.04-apt
    dist: xenial
    language: python
    python: 2.7
    sudo: required
    compiler: gcc
    addons:
      apt:
        packages:
          - build-essential
          - libnetcdf-dev
          - netcdf-bin
          - python-netcdf4
          - python-setuptools
          - python-dev
          - python-pip
          - python-scipy
          - python-numpy
          - python-netcdf4
          - python-matplotlib
          - python-shapely
          - python-pyproj
          - python-imaging
          - python-py
          - libgeos-c1v5
          - libgeos-3.5.0
          - libgeos-dev
          - gmsh
          - wget
    virtualenv:
      system_site_packages: true
    install:
      - sudo apt-get update
      - sudo apt-get install -y git gcc g++ build-essential python-setuptools python-dev python-pip python-scipy python-numpy libnetcdf-dev netcdf-bin python-netcdf4 python-matplotlib python-shapely python-pyproj python-pil gmsh python-py libgeos-c1v5 libgeos-3.5.0 libgeos-dev wget
      # Temporarily pdate dap and shapely with recent versions
      - pip install -U pip setuptools
      - pip install Pydap==3.2.1
      - pip install Shapely==1.5.9
      # Install ScientificPython
      - pip install --force-reinstall --ignore-installed --no-cache-dir --no-binary ScientificPython ScientificPython
    before_script:
      - export LD_LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LIBRARY_PATH"
      - export LD_LIBRARY_PATH="/usr/lib/python2.7/dist-packages/Scientific/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="/usr/lib/python2.7/dist-packages/Scientific/:$LIBRARY_PATH"
      - export PYTHONPATH="/usr/lib/python2.7/dist-packages/Scientific/:$PYTHONPATH"
    script:
      - make
      - make unittest
      # Pre-download, to best work with Travis timeout
      - make pre_download_large_datasets
      - make test


  # Build Environment #6
  #
  # Ubuntu Trusty 14.04 apt base packages build and test
  #
  - env:
      - NAME=Trusty-14.04-apt
    dist: trusty
    language: python
    python: 2.7
    sudo: required
    compiler: gcc
    addons:
      apt:
        packages:
          - build-essential
          - python-setuptools
          - python-dev
          - python-pip
          - python-scipy
          - python-numpy
          - python-netcdf
          - python-scientific
          - python-matplotlib
          - python-shapely
          - python-pyproj
          - python-pil
          - gmsh
          - python-pytest
          - wget
    virtualenv:
      system_site_packages: true
    install:
      - sudo apt-get update
      - sudo apt-get install -y git gcc g++ build-essential python-setuptools python-dev python-pip python-scipy python-numpy python-netcdf python-scientific python-matplotlib python-shapely python-pyproj python-pil gmsh python-pytest
      - pip install -U pip setuptools
      - pip install Pydap==3.2.1
      - pip install Shapely==1.5.9
    before_script:
      - export LD_LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LIBRARY_PATH"
      - export LD_LIBRARY_PATH="/usr/lib/python2.7/dist-packages/Scientific/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="/usr/lib/python2.7/dist-packages/Scientific/:$LIBRARY_PATH"
      - export PYTHONPATH="/usr/lib/python2.7/dist-packages/Scientific/:$PYTHONPATH"
    script:
      - make
      - make unittest
      # Pre-download, to best work with Travis timeout
      - make pre_download_large_datasets
      - make test


  # Build Environment #7
  #
  # Ubuntu Precise 12.04 apt base packages build and test
  #
  - env:
      - NAME=Precise-12.04-apt
    dist: precise
    language: python
    python: 2.7
    sudo: required
    compiler: gcc
    addons:
      apt:
        packages:
          - build-essential
          - python-setuptools
          - python-dev
          - python-pip
          - python-scipy
          - python-numpy
          - python-scientific
          - python-matplotlib
          - python-shapely
          - python-pyproj
          - python-imaging
          - python-requests
          - gmsh
          - python-py
          - wget
    virtualenv:
      system_site_packages: true
    install:
      - sudo apt-get update
      - sudo apt-get install -y git gcc g++ build-essential python-setuptools python-dev python-pip python-scipy python-numpy python-scientific python-matplotlib python-shapely python-pyproj python-imaging gmsh python-py
      - pip install -U pip setuptools
      - pip install Pydap==3.2.1
      - pip install Shapely==1.5.9
    before_script:
      - export LD_LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LIBRARY_PATH"
    script:
      - make
      - make unittest
      # Pre-download, to best work with Travis timeout
      - make pre_download_large_datasets
      - make test


  # Build Environment #8
  #
  # Ubuntu Xenial 16.04 pip base packages build and test
  #
  - env:
      - NAME=Xenial-16.04-pip
    dist: xenial
    language: python
    python: 2.7
    sudo: required
    compiler: gcc
    addons:
      apt:
        packages:
          - libnetcdf-dev
          - netcdf-bin
          - python-netcdf4
          - gmsh
          - wget
    virtualenv:
      system_site_packages: true
    install:
      - pip install numpy matplotlib pyproj shapely Pillow pytest
      - pip install Pydap==3.2.1
      - pip install --force-reinstall --ignore-installed --no-cache-dir --no-binary ScientificPython ScientificPython
      - pip install -U geos
      - pip install --no-binary Shapely Shapely==1.5.9
    before_script:
      - export LD_LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LIBRARY_PATH"
    script:
      - make
      - make unittest
      # Pre-download, to best work with Travis timeout
      - make pre_download_large_datasets
      - make test


  # Build Environment #9
  #
  # Ubuntu Trusty 14.04 pip base packages build and test
  #
  - env:
      - NAME=Trusty-14.04-pip
    dist: trusty
    language: python
    python: 2.7
    sudo: required
    compiler: gcc
    addons:
      apt:
        packages:
          # Temporarily install apt Scientific
          - python-netcdf
          - python-scientific
          - gmsh
          - wget
    virtualenv:
      system_site_packages: true
    install:
      - pip install numpy matplotlib pyproj shapely Pillow pytest
      - pip install Pydap==3.2.1
      #- pip install ScientificPython
    before_script:
      - export LD_LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LIBRARY_PATH"
    script:
      - make
      - make unittest
      # Pre-download, to best work with Travis timeout
      - make pre_download_large_datasets
      - make test


  # Build Environment #10
  #
  # Ubuntu Precise 12.04 pip base packages build and test
  #
  - env:
      - NAME=Precise-12.04-pip
    dist: precise
    language: python
    python: 2.7
    sudo: required
    compiler: gcc
    addons:
      apt:
        packages:
          # Temporarily install apt Scientific
          - python-netcdf
          - python-scientific
          - gmsh
          - wget
    virtualenv:
      system_site_packages: true
    install:
      - pip install numpy matplotlib pyproj shapely Pillow pytest
      - pip install Pydap==3.2.1
      - pip install requests
      #- pip install ScientificPython
    before_script:
      - export LD_LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LD_LIBRARY_PATH"
      - export LIBRARY_PATH="$HOME/build/shingleproject/Shingle/lib/:$LIBRARY_PATH"
    script:
      - make
      - make unittest
      # Pre-download, to best work with Travis timeout
      - make pre_download_large_datasets
      - make test


  # Build Environment #11
  #
  # Ubuntu Xenial 16.04 pip pypi
  #
  - env:
      - NAME=Xenial-16.04-pypi
    dist: xenial
    language: python
    python: 2.7
    sudo: required
    compiler: gcc
    addons:
      apt:
        packages:
          - libnetcdf-dev
          - netcdf-bin
          - python-netcdf4
          - gmsh
          - wget
    virtualenv:
      system_site_packages: true
    install:
      - pip install numpy matplotlib pyproj shapely Pillow pytest
      - pip install Pydap==3.2.1
      - pip install --force-reinstall --ignore-installed --no-cache-dir --no-binary ScientificPython ScientificPython
      - pip install -U geos
      - pip install --no-binary Shapely Shapely==1.5.9
      - pip install Markdown>=2.0.1
      - pip install shingle
    script:
      # Just test the cases that do not depend on the large RTopo dataset
      - shingle -t test --tag continuous --tag -RTopo


  # Build Environment #12
  #
  # macOS 10.13 High Sierra pip base packages build
  #
  - env:
      - NAME=HighSierra-10.13-pypi
    os: osx
    language: generic
    before_install:
      # See pyenv homebrew recommendations <https://github.com/yyuu/pyenv/wiki#suggested-build-environment>.
      # See https://docs.travis-ci.com/user/osx-ci-environment/#A-note-on-upgrading-packages.
      # virtualenv needs pyenv knowledge.
      # For pip: pyenv-virtualenv <https://github.com/yyuu/pyenv-virtualenv/blob/master/README.md>.
      - brew update
      - brew install openssl readline
      - brew outdated pyenv || brew upgrade pyenv
      - brew install pyenv-virtualenv
      - pyenv install 2.7.15
      - export PYENV_VERSION=2.7.15
      - export PATH="/Users/travis/.pyenv/shims:${PATH}"
      - pyenv virtualenv venv
    install:
      - python -m pip install -U pip
      - pip install numpy==1.13.3
      - pip install matplotlib pyproj shapely Pillow pytest requests
      - pip install Pydap==3.2.1
      - rm -f '/usr/local/include/c++'
      - brew install gmsh
      - brew link --overwrite gcc
      - brew install netcdf
      - pip install ScientificPython
      - pip install Markdown>=2.0.1
      - pip install shingle
    script:
      # Just test the cases that do not depend on the large RTopo dataset
      - shingle -t test --tag continuous --tag -RTopo


notifications:
  slack:
    secure: RRdmxLqjwm5LVcHmeoLs+WAB8FhYEMb+riZMvAoVxt4/7FuSIvyil/oeL8KI7P7g/EPnN8hQlf7duyGwAaih/gWKd47vDnmhir7VbO6fe3zBVvX9TVa/kuqejGSnJlOPw6dFDMLoCqnJ08dwUWzvvAmCHr7wod16PfI557pqvAE=

